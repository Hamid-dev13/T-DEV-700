# Nom du workflow (appara√Æt dans l'interface GitHub)
name: CI/CD - Build et Push Docker

# Quand ce workflow se d√©clenche ?
on:
  # Sur les push vers main, dev et CICD (branche de test)
  push:
    branches: [main, dev, CICD]
  # Sur les pull requests vers main et dev
  pull_request:
    branches: [main, dev]

# Les diff√©rentes t√¢ches √† ex√©cuter
jobs:
  # ==========================================
  # JOB : Builder et Pousser les IMAGES DOCKER
  # ==========================================
  docker-build-push:
    name: üê≥ Docker - Build et Push vers Docker Hub
    runs-on: ubuntu-latest

    steps:
      # √âtape 1 : R√©cup√©rer le code du repo
      - name: üì• Checkout du code
        uses: actions/checkout@v4

      # √âtape 2 : Configurer Docker Buildx (buildeur avanc√© et plus rapide)
      - name: üîß Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # √âtape 3 : Se connecter √† Docker Hub
      - name: üîê Login vers Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # √âtape 4 : Pr√©parer les tags pour les images
      # On cr√©e des tags diff√©rents selon la branche
      - name: üè∑Ô∏è Pr√©parer les tags Docker
        id: meta-backend
        run: |
          # R√©cup√©rer le nom de la branche
          BRANCH=${GITHUB_REF##*/}
          # Cr√©er un tag avec le nom de branche (main, dev, CICD...)
          echo "tags=${{ secrets.DOCKER_USERNAME }}/monapp-backend:${BRANCH}" >> $GITHUB_OUTPUT
          # Si c'est la branche main, on ajoute aussi le tag "latest"
          if [ "$BRANCH" == "main" ]; then
            echo "tags=${{ secrets.DOCKER_USERNAME }}/monapp-backend:${BRANCH},${{ secrets.DOCKER_USERNAME }}/monapp-backend:latest" >> $GITHUB_OUTPUT
          fi

      - name: üè∑Ô∏è Pr√©parer les tags Frontend
        id: meta-frontend
        run: |
          BRANCH=${GITHUB_REF##*/}
          echo "tags=${{ secrets.DOCKER_USERNAME }}/monapp-frontend:${BRANCH}" >> $GITHUB_OUTPUT
          if [ "$BRANCH" == "main" ]; then
            echo "tags=${{ secrets.DOCKER_USERNAME }}/monapp-frontend:${BRANCH},${{ secrets.DOCKER_USERNAME }}/monapp-frontend:latest" >> $GITHUB_OUTPUT
          fi

      # √âtape 5 : Builder et POUSSER l'image Docker du BACKEND
      - name: üê≥ Build et Push Backend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          target: production
          # IMPORTANT : On pousse maintenant l'image sur Docker Hub !
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          # Cache pour acc√©l√©rer les builds
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # √âtape 6 : Builder et POUSSER l'image Docker du FRONTEND
      - name: üê≥ Build et Push Frontend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # √âtape 7 : Message de succ√®s avec les images publi√©es
      - name: ‚úÖ Images publi√©es avec succ√®s !
        run: |
          echo "üéâ Images Docker publi√©es sur Docker Hub !"
          echo ""
          echo "üì¶ Backend : ${{ steps.meta-backend.outputs.tags }}"
          echo "üì¶ Frontend : ${{ steps.meta-frontend.outputs.tags }}"
          echo ""
          echo "Pour t√©l√©charger les images :"
          echo "docker pull ${{ secrets.DOCKER_USERNAME }}/monapp-backend:${GITHUB_REF##*/}"
          echo "docker pull ${{ secrets.DOCKER_USERNAME }}/monapp-frontend:${GITHUB_REF##*/}"
