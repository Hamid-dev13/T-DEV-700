# Nom du workflow (appara√Æt dans l'interface GitHub)
name: CI/CD - Build, Push et Deploy

# Quand ce workflow se d√©clenche ?
on:
  # Sur les push vers main, dev et CICD (branche de test)
  push:
    branches: [main, dev, CICD]
  # Sur les pull requests vers main et dev
  pull_request:
    branches: [main, dev]

# Les diff√©rentes t√¢ches √† ex√©cuter
jobs:
  # ==========================================
  # JOB 1 : Builder et Pousser les IMAGES DOCKER
  # ==========================================
  docker-build-push:
    name: üê≥ Docker - Build et Push vers Docker Hub
    runs-on: ubuntu-latest

    steps:
      # √âtape 1 : R√©cup√©rer le code du repo
      - name: üì• Checkout du code
        uses: actions/checkout@v4

      # √âtape 2 : Configurer Docker Buildx (buildeur avanc√© et plus rapide)
      - name: üîß Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # √âtape 3 : Se connecter √† Docker Hub
      - name: üîê Login vers Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # √âtape 4 : Pr√©parer les tags pour les images
      - name: üè∑Ô∏è Pr√©parer les tags Docker Backend
        id: meta-backend
        run: |
          BRANCH=${GITHUB_REF##*/}
          echo "tags=${{ secrets.DOCKER_USERNAME }}/monapp-backend:${BRANCH}" >> $GITHUB_OUTPUT
          if [ "$BRANCH" == "main" ]; then
            echo "tags=${{ secrets.DOCKER_USERNAME }}/monapp-backend:${BRANCH},${{ secrets.DOCKER_USERNAME }}/monapp-backend:latest" >> $GITHUB_OUTPUT
          fi

      - name: üè∑Ô∏è Pr√©parer les tags Docker Frontend
        id: meta-frontend
        run: |
          BRANCH=${GITHUB_REF##*/}
          echo "tags=${{ secrets.DOCKER_USERNAME }}/monapp-frontend:${BRANCH}" >> $GITHUB_OUTPUT
          if [ "$BRANCH" == "main" ]; then
            echo "tags=${{ secrets.DOCKER_USERNAME }}/monapp-frontend:${BRANCH},${{ secrets.DOCKER_USERNAME }}/monapp-frontend:latest" >> $GITHUB_OUTPUT
          fi

      # √âtape 5 : Builder et POUSSER l'image Docker du BACKEND
      - name: üê≥ Build et Push Backend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # √âtape 6 : Builder et POUSSER l'image Docker du FRONTEND
      - name: üê≥ Build et Push Frontend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # √âtape 7 : Message de succ√®s
      - name: ‚úÖ Images publi√©es avec succ√®s !
        run: |
          echo "üéâ Images Docker publi√©es sur Docker Hub !"
          echo "üì¶ Backend : ${{ steps.meta-backend.outputs.tags }}"
          echo "üì¶ Frontend : ${{ steps.meta-frontend.outputs.tags }}"

  # ==========================================
  # JOB 2 : D√âPLOIEMENT sur le VPS
  # ==========================================
  deploy:
    name: üöÄ D√©ploiement sur VPS
    runs-on: ubuntu-latest

    needs: docker-build-push
   
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      # √âtape 1 : R√©cup√©rer le code (pour avoir les fichiers docker-compose)
      - name: üì• Checkout du code
        uses: actions/checkout@v4

      # √âtape 2 : D√©ployer sur le VPS via SSH
      - name: üöÄ D√©ploiement via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "üîÑ D√©but du d√©ploiement sur le VPS..."
            
            # Se d√©placer dans le dossier du projet
            cd /root/T-DEV-700
            
            # Pull les derni√®res modifications depuis GitHub
            echo " R√©cup√©ration des derni√®res modifications..."
            git pull origin main
            
            # Se connecter √† Docker Hub (pour pouvoir pull les images priv√©es si besoin)
            echo " Connexion √† Docker Hub..."
            echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            # Pull les nouvelles images Docker depuis Docker Hub
            echo "üê≥ T√©l√©chargement des nouvelles images Docker..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/monapp-backend:main
            docker pull ${{ secrets.DOCKER_USERNAME }}/monapp-frontend:main
            
            # Arr√™ter les anciens containers
            echo " Arr√™t des anciens containers..."
            docker-compose -f docker-compose.prod.yml down
            
            # D√©marrer les nouveaux containers avec les nouvelles images
            echo "D√©marrage des nouveaux containers..."
            docker-compose -f docker-compose.prod.yml up -d
            
            # Nettoyer les anciennes images non utilis√©es (√©conomiser de l'espace)
            echo " Nettoyage des anciennes images..."
            docker image prune -af
            
            # V√©rifier que les containers tournent
            echo " V√©rification des containers..."
            docker-compose -f docker-compose.prod.yml ps
            
            echo " D√©ploiement termin√© avec succ√®s !"

      # √âtape 3 : Message de succ√®s
      - name:  D√©ploiement r√©ussi !
        run: |
          echo "Application d√©ploy√©e sur le VPS !"
          echo " L'application est maintenant accessible sur http://${{ secrets.SSH_HOST }}"
